apiVersion: batch/v1
kind: Job
metadata:
  name: registry-db-user-job
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
spec:
  template:
    spec:
      containers:
              {{- $adminSecret := (lookup "v1" "Secret" "stolon" "stolon2") | default dict }}
              {{- $adminSecretData := ($adminSecret.data) | default dict }}
              {{- $adminConnection := ($adminSecretData.uri) | b64dec }}
              {{- $secret := (lookup "v1" "Secret" "registry" "registry-postgres") | default dict }}
              {{- $secretData := ($secret.data) | default dict }}
              {{- $user := ($secretData.username) | b64dec }}
              {{- $pass := ($secretData.password) | b64dec }}
              {{- $database := ($secretData.database) | b64dec }}
        - name: create-role
          image: postgres
          env:
            - name: PGCONN
              value: "{{- ($adminConnection) }}"
            - name: DB_USER
              value: "{{- ($user) }}"
            - name: DB_PASSWORD
              value: "{{- ($pass) }}"
            - name: DB_NAME
              value: "{{- ($database) }}"
            - name: PLSQL
              value: |
                DO 
                $$$
                   BEGIN
                      -- Connect as a superuser
                      IF NOT EXISTS (SELECT * FROM pg_roles WHERE rolname = '$(DB_USER)') THEN
                      -- Create the role if it does not exist
                      CREATE ROLE $(DB_USER) LOGIN PASSWORD '$(DB_PASSWORD)';
                      END IF;
    
                      IF NOT EXISTS (SELECT datname FROM pg_database WHERE datname='$(DB_NAME)') THEN
                      -- Create the database if it does not exist
                      CREATE DATABASE $(DB_NAME) OWNER $(DB_USER);
                      END IF;
    
                      -- Connect to the newly created database
                      --revoke all existing privileges
                      REVOKE ALL PRIVILEGES ON DATABASE $(DB_NAME) FROM $(DB_USER);
                      -- grant new privileges
                      GRANT ALL PRIVILEGES ON DATABASE $(DB_NAME) TO $(DB_USER);
                    END
                $$$;

          command: ["psql", "$(PGCONN)", "-c", "$(PLSQL)"]
      restartPolicy: Never
  backoffLimit: 10
