NAME: stolon
LAST DEPLOYED: Thu Oct 27 09:19:49 2022
NAMESPACE: stolon
STATUS: deployed
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
null

COMPUTED VALUES:
stolon:
  clusterSpec: {}
  debug: false
  etcdImage:
    pullPolicy: IfNotPresent
    repository: k8s.gcr.io/etcd-amd64
    tag: 2.3.7
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: sorintlab/stolon
    tag: master-pg14
  job:
    annotations: {}
    autoCreateCluster: true
    autoUpdateClusterSpec: true
  keeper:
    affinity: {}
    annotations: {}
    extraEnv: []
    fsGroup: ""
    hooks:
      failKeeper:
        enabled: false
    nodeSelector: {}
    podDisruptionBudget: null
    priorityClassName: ""
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      ports:
        keeper:
          port: 5432
          protocol: TCP
          targetPort: 5432
      type: ClusterIP
    tolerations: []
    uid_prefix: keeper
    volumeMounts: []
    volumes: []
  persistence:
    accessModes:
    - ReadWriteOnce
    enabled: true
    size: 10Gi
    storageClassName: ""
  pgParameters:
    ssl: "off"
    ssl_ca_file: null
    ssl_cert_file: null
    ssl_key_file: null
  ports:
    metrics:
      containerPort: 8080
    stolon:
      containerPort: 5432
  proxy:
    affinity: {}
    annotations: {}
    extraEnv: []
    nodeSelector: {}
    podDisruptionBudget: null
    priorityClassName: ""
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      ports:
        proxy:
          port: 5432
          protocol: TCP
          targetPort: 5432
      type: ClusterIP
    tolerations: []
  rbac:
    create: true
  replicationPassword: defaultPassword
  replicationPasswordFile: null
  replicationSecret:
    name: ""
    passwordKey: pg_repl_password
    usernameKey: pg_repl_username
  replicationUsername: postgres-repl
  sentinel:
    affinity: {}
    annotations: {}
    extraEnv: []
    nodeSelector: {}
    podDisruptionBudget: null
    priorityClassName: ""
    replicaCount: 1
    resources: {}
    tolerations: []
  serviceAccount:
    create: true
  serviceMonitor:
    enabled: false
    labels: {}
  shmVolume:
    enabled: false
  store:
    backend: kubernetes
    kubeResourceKind: configmap
  superuserPassword: defaultPassword
  superuserPasswordFile: null
  superuserSecret:
    name: ""
    passwordKey: pg_su_password
    usernameKey: pg_su_username
  superuserUsername: postgres
  tls:
    enabled: false
    rootCa: ""
    rootCaFile: /certs/rootCa.crt
    serverCrt: ""
    serverCrtFile: /certs/serverCrt.crt
    serverKey: ""
    serverKeyFile: /certs/serverKey.key

HOOKS:
---
# Source: stolon/charts/stolon/templates/hooks/create-cluster-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: stolon-create-cluster
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: stolon
        release: stolon
    spec:
      restartPolicy: OnFailure
      serviceAccountName: stolon
      containers:
        - name: stolon-create-cluster
          image: "sorintlab/stolon:master-pg14"
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/stolonctl"]
          args:
            - init
            - --cluster-name=stolon
            - --store-backend=kubernetes
            - --kube-resource-kind=configmap
            - --yes
            - '{ "initMode": "new", "pgParameters": {"ssl":"off","ssl_ca_file":null,"ssl_cert_file":null,"ssl_key_file":null}  }'
---
# Source: stolon/charts/stolon/templates/hooks/update-cluster-spec-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: stolon-update-cluster-spec
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: stolon
        release: stolon
    spec:
      restartPolicy: OnFailure
      serviceAccountName: stolon
      containers:
        - name: stolon-update-cluster-spec
          image: "sorintlab/stolon:master-pg14"
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/stolonctl"]
          args:
            - update
            - --cluster-name=stolon
            - --store-backend=kubernetes
            - --kube-resource-kind=configmap
            - -p
            - '{ "pgParameters": {"ssl":"off","ssl_ca_file":null,"ssl_cert_file":null,"ssl_key_file":null}}'
MANIFEST:
---
# Source: stolon/charts/stolon/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stolon
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
---
# Source: stolon/charts/stolon/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: stolon
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
type: Opaque
data:

  pg_su_password: "ZGVmYXVsdFBhc3N3b3Jk"


  pg_repl_password: "ZGVmYXVsdFBhc3N3b3Jk"
---
# Source: stolon/charts/stolon/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: stolon
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
data:
---
# Source: stolon/charts/stolon/templates/hooks/init-db-job.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: stolon-init-scripts
data:
---
# Source: stolon/charts/stolon/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: stolon
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
rules:
- apiGroups:
    - ""
  resources:
    - pods
    - endpoints
    - configmaps
    - events
  verbs:
    - "*"
---
# Source: stolon/charts/stolon/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: stolon
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: stolon
subjects:
- kind: ServiceAccount
  name: stolon
---
# Source: stolon/charts/stolon/templates/keeper-headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: stolon-keeper-headless
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: keeper
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app: stolon
    release: stolon
    component: stolon-keeper
---
# Source: stolon/charts/stolon/templates/proxy-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: stolon-proxy
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: proxy
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app: stolon
    release: stolon
    component: stolon-proxy
---
# Source: stolon/charts/stolon/templates/proxy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stolon-proxy
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stolon
      release: stolon
      component: stolon-proxy
  template:
    metadata:
      labels:
        app: stolon
        release: stolon
        component: stolon-proxy
        stolon-cluster: stolon
      annotations:
    spec:
      serviceAccountName: stolon
      containers:
        - name: stolon
          image: "sorintlab/stolon:master-pg14"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/bash"
            - "-ec"
            - |
              exec gosu stolon stolon-proxy
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STPROXY_CLUSTER_NAME
              value: stolon
            - name: STPROXY_STORE_BACKEND
              value: "kubernetes"
            - name: STPROXY_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STPROXY_LISTEN_ADDRESS
              value: "0.0.0.0"
            - name: STPROXY_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"
            - name: STPROXY_DEBUG
              value: "false"
          ports:
            - name: metrics
              containerPort: 8080
            - name: stolon
              containerPort: 5432
          resources:
            {}
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 10
            timeoutSeconds: 5
---
# Source: stolon/charts/stolon/templates/sentinel-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stolon-sentinel
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stolon
      release: stolon
      component: stolon-sentinel
  template:
    metadata:
      labels:
        app: stolon
        release: stolon
        component: stolon-sentinel
        stolon-cluster: stolon
      annotations:
        checksum/config: 1ba679573fabf1d9e4638472910e24cc0cf1d9a988e6e028d2b8c29ddc63023e
    spec:
      serviceAccountName: stolon
      containers:
        - name: stolon
          image: "sorintlab/stolon:master-pg14"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/bash"
            - "-ec"
            - |
              exec gosu stolon stolon-sentinel
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STSENTINEL_CLUSTER_NAME
              value: stolon
            - name: STSENTINEL_STORE_BACKEND
              value: "kubernetes"
            - name: STSENTINEL_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STSENTINEL_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"
            - name: STSENTINEL_DEBUG
              value: "false"
          ports:
            - name: metrics
              containerPort: 8080
            - name: stolon
              containerPort: 5432
          resources:
            {}
---
# Source: stolon/charts/stolon/templates/keeper-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stolon-keeper
  labels:
    app: stolon
    chart: stolon-1.7.2
    release: stolon
    heritage: Helm
spec:
  serviceName: stolon-keeper-headless
  replicas: 1
  selector:
    matchLabels:
      app: stolon
      release: stolon
      component: stolon-keeper
  template:
    metadata:
      labels:
        app: stolon
        release: stolon
        component: stolon-keeper
        stolon-cluster: stolon
      annotations:
    spec:
      serviceAccountName: stolon
      terminationGracePeriodSeconds: 10
      containers:
        - name: stolon
          image: "sorintlab/stolon:master-pg14"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/bash"
            - "-ec"
            - |
              # Generate our keeper uid using the pod index
              IFS='-' read -ra ADDR <<< "$(hostname)"
              export STKEEPER_UID="keeper${ADDR[-1]}"
              export POD_IP=$(hostname -i)
              export STKEEPER_PG_ADVERTISE_ADDRESS=$POD_IP
              export STKEEPER_PG_LISTEN_ADDRESS=${STKEEPER_PG_LISTEN_ADDRESS:-$POD_IP}
              export STOLON_DATA=/stolon-data
              chown stolon:stolon $STOLON_DATA
              exec gosu stolon stolon-keeper --data-dir $STOLON_DATA
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STKEEPER_CLUSTER_NAME
              value: stolon
            - name: STKEEPER_STORE_BACKEND
              value: "kubernetes"
            - name: STKEEPER_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STKEEPER_PG_REPL_USERNAME

              value: "postgres-repl"

            - name: STKEEPER_PG_REPL_PASSWORDFILE

              value: "/etc/secrets/stolon/pg_repl_password"

            - name: STKEEPER_PG_SU_USERNAME

              value: "postgres"

            - name: STKEEPER_PG_SU_PASSWORDFILE

              value: "/etc/secrets/stolon/pg_su_password"

            - name: STKEEPER_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"
            - name: STKEEPER_DEBUG
              value: "false"
          ports:
            - name: metrics
              containerPort: 8080
            - name: stolon
              containerPort: 5432
          resources:
            {}
          volumeMounts:
          - name: data
            mountPath: /stolon-data

          - name: stolon-secrets
            mountPath: /etc/secrets/stolon



          lifecycle:
      volumes:
        - name: config
          configMap:
            name: stolon

        - name: stolon-secrets
          secret:
            secretName: stolon



  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"

