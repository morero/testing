NAME: zitadel
LAST DEPLOYED: Thu Oct 27 22:01:04 2022
NAMESPACE: zitadel
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
configmapConfig:
  Database:
    postgres:
      Admin:
        Password: OiuOKIWKE2Ve9LnAh6iYZmt1zTGR5t5X
      User:
        Password: hCZmQPiaynBiMEqmur0VSSCE5FIPski4
zitadel:
  replicaCount: 1

COMPUTED VALUES:
configmapConfig:
  Database:
    postgres:
      Admin:
        Password: OiuOKIWKE2Ve9LnAh6iYZmt1zTGR5t5X
      User:
        Password: hCZmQPiaynBiMEqmur0VSSCE5FIPski4
zitadel:
  affinity: {}
  chownImage:
    pullPolicy: IfNotPresent
    repository: alpine
    tag: "3.11"
  cockroachdb:
    enabled: false
    fullnameOverride: crdb
    tls:
      enabled: false
  env: []
  fullnameOverride: ""
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: ghcr.io/zitadel/zitadel
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
      kubernetes.io/ingress.class: traefik
    className: ""
    enabled: true
    hosts:
    - host: auth.local.ertia.cloud
      paths:
      - path: /
        pathType: Prefix
    tls:
    - hosts:
      - auth.ertia.local.cloud
      secretName: auth-tls
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      honorLabels: false
      honorTimestamps: true
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    annotations: {}
    port: 8080
    protocol: http2
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
  zitadel:
    configmapConfig:
      Database:
        cockroach:
          Admin:
            SSL:
              Cert: null
              Key: null
              Mode: disable
              RootCert: null
          Enabled: false
          Host: crdb-public
          User:
            SSL:
              Cert: null
              Key: null
              Mode: disable
              RootCert: null
          enabled: false
        postgres:
          Admin:
            Database: postgres
            Password: postgres
            SSL:
              Cert: null
              Key: null
              Mode: disable
              RootCert: null
            Username: postgres
          Database: zitadel
          Enabled: true
          Host: stolon-proxy.stolon
          MaxConnIdleTime: 5m
          MaxConnLifetime: 1h
          MaxOpenConns: 25
          Port: 5432
          User:
            Password: zitadel
            SSL:
              Cert: null
              Key: null
              Mode: disable
              RootCert: null
            Username: zitadel
      ExternalSecure: false
      Machine:
        Identification:
          Hostname:
            Enabled: true
          Webhook:
            Enabled: false
      TLS:
        Enabled: false
    dbSslClientCrtSecret: ""
    dbSslRootCrt: ""
    dbSslRootCrtSecret: ""
    masterkey: oce8qUe2WFgQACZq1gc3VP1JEnKmG6M6
    masterkeySecretName: ""

HOOKS:
---
# Source: zitadel/charts/zitadel/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "zitadel-test-connection"
  labels:
    helm.sh/chart: zitadel-3.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['zitadel:8080/ui/console']
  restartPolicy: Never
MANIFEST:
---
# Source: zitadel/charts/zitadel/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-3.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: zitadel/charts/zitadel/templates/secret_zitadel-masterkey.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: zitadel-masterkey
stringData:
  masterkey: oce8qUe2WFgQACZq1gc3VP1JEnKmG6M6
---
# Source: zitadel/charts/zitadel/templates/secret_zitadel-secrets.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: zitadel-secrets-yaml
stringData:
  zitadel-secrets-yaml: |-
    
    null
---
# Source: zitadel/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: oidc-secret
type: nginx.org/oidc
stringData:
  client-secret: base64-encoded-value-of-client-secret
---
# Source: zitadel/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-zitadel
  namespace: zitadel
type: Opaque
data:
  username: "WDVLWXFOTlk2NENmUjVFUWlaTUVmOEE4ZXRIc0xhQWZHYmVyQk5LNw=="
  password: "S0E4eUFpc1N2TW5xaVA5T255R211SGlJb2pXRkU3eHI3VUxXWGRTNQ=="
  database: "S0dXa3l6bVVHUWtzWWVoa1gyYVY5TnNzbWpVdEZaRTBET09keWhnZA=="
---
# Source: zitadel/charts/zitadel/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zitadel-config-yaml
data:
  zitadel-config-yaml: |-
    
    Database:
      cockroach:
        Admin:
          SSL:
            Cert: null
            Key: null
            Mode: disable
            RootCert: null
        Enabled: false
        Host: crdb-public
        User:
          SSL:
            Cert: null
            Key: null
            Mode: disable
            RootCert: null
        enabled: false
      postgres:
        Admin:
          Database: postgres
          Password: postgres
          SSL:
            Cert: null
            Key: null
            Mode: disable
            RootCert: null
          Username: postgres
        Database: zitadel
        Enabled: true
        Host: stolon-proxy.stolon
        MaxConnIdleTime: 5m
        MaxConnLifetime: 1h
        MaxOpenConns: 25
        Port: 5432
        User:
          Password: zitadel
          SSL:
            Cert: null
            Key: null
            Mode: disable
            RootCert: null
          Username: zitadel
    ExternalSecure: false
    Machine:
      Identification:
        Hostname:
          Enabled: true
        Webhook:
          Enabled: false
    TLS:
      Enabled: false
---
# Source: zitadel/charts/zitadel/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-3.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http2-server
      appProtocol: http2
  selector:
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
---
# Source: zitadel/charts/zitadel/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-3.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zitadel
      app.kubernetes.io/instance: zitadel
  template:
    metadata:
      annotations:
        checksum/configmap: 5c00ca2221c04c13f0830e209f0a0024ddef742303cf21f61e27ddcd257210c2
        checksum/secret-db-ssl-root-crt: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/secret-zitadel-secrets: 493d2c41d55305a9e9d5bb89efcfbf6e9c2ba4e71f61c99b92228896457b8899
      labels:
        app.kubernetes.io/name: zitadel
        app.kubernetes.io/instance: zitadel
    spec:
      serviceAccountName: zitadel
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      enableServiceLinks: false
      containers:
        - name: zitadel
          securityContext:
              {}
          image: "ghcr.io/zitadel/zitadel:v2.8.0"
          imagePullPolicy: IfNotPresent
          args:
            - start-from-init
            - --config
            - /config/zitadel-config-yaml
            - --steps
            - /config/zitadel-config-yaml
            - --masterkeyFile
            - /.secrets/masterkey
            - --tlsMode
            - disabled
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          ports:
          - containerPort: 8080
            name: http2-server
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /debug/healthz
              port: http2-server
            initialDelaySeconds: 60
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /debug/ready
              port: http2-server
            initialDelaySeconds: 60
            periodSeconds: 5
          volumeMounts:
          - name: zitadel-config-yaml
            mountPath: /config
          - name: chowned-secrets
            mountPath: /.secrets
          resources:
              {}
      initContainers:
        - args:
          - "cp /masterkey/* /chowned-secrets/ &&  chown -R 1000:1000 /chowned-secrets/* && chmod 400 /chowned-secrets/*"
          command:
          - sh
          - -c
          image: "alpine:3.11"
          imagePullPolicy: IfNotPresent
          name: chown
          volumeMounts:
          - name: chowned-secrets
            mountPath: /chowned-secrets
          - name: masterkey
            mountPath: /masterkey
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: zitadel-config-yaml
        configMap:
          name: zitadel-config-yaml
      - name: masterkey
        secret:
          secretName: zitadel-masterkey
      - name: chowned-secrets
        emptyDir: {}
---
# Source: zitadel/charts/zitadel/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: zitadel
  labels:
    helm.sh/chart: zitadel-3.3.0
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/version: "v2.8.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/ingress.class: traefik
spec:
  tls:
    - hosts:
        - "auth.ertia.local.cloud"
      secretName: auth-tls
  rules:
    - host: "auth.local.ertia.cloud"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: zitadel
                port:
                  number: 8080

