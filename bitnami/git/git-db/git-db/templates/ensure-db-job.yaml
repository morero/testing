---
# Source: git-db/templates/ensure-db-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ensure-db-git
  namespace: db
spec:
  template:
    spec:
      containers:
        - name: ensure-db-git
          image: postgres
          env:
            - name: ADMIN_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "stolon-auth" # {"$kpt-set":"postgres-admin-secret-name"}
                  key: "username" # {"$kpt-set":"postgres-admin-secret-username-key"}
            - name: ADMIN_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "stolon-auth" # {"$kpt-set":"postgres-admin-secret-name"}
                  key: "password" # {"$kpt-set":"postgres-admin-secret-password-key"}
            - name: PGCONN
              value: "postgresql://$(ADMIN_DB_USERNAME):$(ADMIN_DB_PASSWORD)@stolon-proxy.stolon:5432/postgres"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: "postgres-git"
                  key: "username"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "postgres-git"
                  key: "password"
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: "postgres-git"
                  key: "database"
          command: ["sh", "-c"]
          args:
          - |
            set -e
            until psql $(PGCONN) -c '\q'; do
              >&2 echo "Postgres is unavailable - sleeping"
              sleep 1
            done
            psql $(PGCONN) -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$(DB_USER)') THEN CREATE ROLE $DB_USER WITH LOGIN PASSWORD '$DB_PASSWORD'; END IF; END \$\$"
            if ! psql $(PGCONN) -lqt | cut -d \| -f 1 | grep -qw $(DB_NAME); then
              psql $(PGCONN) -c "CREATE DATABASE $(DB_NAME) OWNER $(DB_USER);"
            fi
            psql $(PGCONN) -c "DO \$\$ BEGIN REVOKE ALL PRIVILEGES ON DATABASE $(DB_NAME) FROM $(DB_USER); END \$\$"
            psql $(PGCONN) -c "DO \$\$ BEGIN GRANT ALL PRIVILEGES ON DATABASE $(DB_NAME) TO $(DB_USER); END \$\$"
      restartPolicy: Never
  backoffLimit: 10
