apiVersion: pg.percona.com/v2beta1
kind: PerconaPGCluster
metadata:
  name: "percona-cluster"
spec:
  
# if users is comment out, default user cluster2 will be created.
# if restore from s3 backup, previous users will exist with password from backup  
  users: # {"$kpt-set":"users"}
    - name: "demo" # {"$kpt-set":"db_user"}
      password:
        type: AlphaNumeric
      databases: # {"$kpt-set":"db_list"}
        - "demo"
      options: "" # {"$kpt-set":"db_roles"}
    - name: postgres
      password:
        type: AlphaNumeric
      databases:
        - "postgres"
      options: "SUPERUSER"

  spec:
    #  secretsName: cluster1-users
    sslCA: percona-cluster-ssl-ca
    sslSecretName: percona-cluster-ssl-keypair
    sslReplicationSecretName: percona-cluster-ssl-keypair
    tlsOnly: true

  image: perconalab/percona-postgresql-operator:main-ppg14-postgres
  postgresVersion: 14

  instances:
  - name: instance1
    dataVolumeClaimSpec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi


  backups:
    pgbackrest:
      stanza: db
      image: perconalab/percona-postgresql-operator:main-ppg14-pgbackrest
      configuration:
        - secret:
            name: cluster-pgbackrest-secrets
      repos:
#        - name: repo1
#          schedules:
#            full: "0 0 * * 6"
#            differential: "0 1 * * 1-6"
#          volume:
#            volumeClaimSpec:
#              accessModes:
#              - ReadWriteOnce
#              resources:
#                requests:
#                  storage: 1Gi
        - name: repo2
          schedules:
            full: "0 0 * * 6" # {"$kpt-set":"s3_backup_schedule_full"}
            differential: "0 1 * * 1-6" # {"$kpt-set":"s3_backup_schedule_diff"}
          s3:
            bucket: "" # {"$kpt-set":"s3_backup_bucket"}
            endpoint: "" # {"$kpt-set":"s3_backup_endpoint"}
            region: "" # {"$kpt-set":"s3_backup_region"}

      global:
#        repo1-retention-full: "14"
#        repo1-retention-full-type: time
#        repo1-path: /pgbackrest/pgo/cluster-v1/repo1
        #repo1-cipher-type: aes-256-cbc
        #repo1-s3-uri-style: path
        repo2-retention-full: "14"
        repo2-retention-full-type: time
        repo2-path: "/pgbackrest/pgo/cluster-v1/repo2"
        log-level-console: info

      #MANUAL BACKUP :: manual backup trigger from command line
      manual:
        repoName: repo2
        options:
          - --type=full

      # enable/disable restore (no time will takes latest backup)
      restore:
        enabled: false # {"$kpt-set":"s3_restore_operation"}
        repoName: repo2
        options:
          - --type="default"

  proxy:
    pgBouncer:
      image: perconalab/percona-postgresql-operator:main-ppg14-pgbouncer


