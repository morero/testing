---
# Source: registry/charts/harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-harbor-core
  namespace: "registry"
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-16.3.0
    app.kubernetes.io/instance: registry
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: registry
      app.kubernetes.io/component: core
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        app.kubernetes.io/instance: registry
        app.kubernetes.io/component: core
      annotations:
        checksum/configmap: fe87e151d9bd17ddbe50e8f028036e24d0db6e37b182c3d36fc0b53bc7ca0ec5
        checksum/configmap-envvars: d372081c2c39f3bb10f0891abebdfe3918249a6643fb18164980d6713dedfa6b
        checksum/secret: 888e033d0166744dfb15d8f26af140fa1fa5001c5f1825449c10cbf786cdc53a
        checksum/secret-envvars: 7d0a16692044ffe68ce281e0ac55855f07e7697b548ba6366c8f24b6906b34e6
        checksum/secret-jobservice: 781c1cb8c406f9c671857534937caef755bd11881e6278a45b608764f98bffd6
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: registry
                    app.kubernetes.io/component: core
                namespaces:
                  - "registry"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: core
          image: docker.io/bitnami/harbor-core:2.7.0-debian-11-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: registry-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: registry-harbor-jobservice
                  key: secret
          envFrom:
            - configMapRef:
                name: registry-harbor-core-envvars
            - secretRef:
                name: registry-harbor-core-envvars
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: ca-download
              mountPath: /etc/core/ca
            - name: psc
              mountPath: /etc/core/token
      volumes:
        - name: config
          configMap:
            name: registry-harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: secret-key
          secret:
            secretName: registry-harbor-core
            items:
              - key: secretKey
                path: key
        - name: token-service-private-key
          secret:
            secretName: registry-harbor-core
        - name: ca-download
          secret:
            secretName: registry-harbor-nginx
        - name: psc
          emptyDir: {}
