---
# Source: helm/charts/grafana-loki/templates/gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-grafana-loki-gateway
  namespace: "monitoring"
  labels:
    app.kubernetes.io/name: grafana-loki
    helm.sh/chart: grafana-loki-2.5.6
    app.kubernetes.io/instance: monitoring
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: grafana-loki
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-loki
      app.kubernetes.io/instance: monitoring
      app.kubernetes.io/part-of: grafana-loki
      app.kubernetes.io/component: gateway
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-loki
        helm.sh/chart: grafana-loki-2.5.6
        app.kubernetes.io/instance: monitoring
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: grafana-loki
        app.kubernetes.io/component: gateway
      annotations:
        checksum/configmap: 3cbb47ffb195f7b65cf5603d8491caa78534f5fb380b8c02ebffcc80b3ad43aa
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana-loki
                    app.kubernetes.io/instance: monitoring
                    app.kubernetes.io/component: gateway
                namespaces:
                  - "monitoring"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: gateway
          image: docker.io/bitnami/nginx:1.23.3-debian-11-r19
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /bin/bash
            - -ec
            - |
              # Generate resolver data
              echo resolver $(awk 'BEGIN{ORS=" "} $1=="nameserver" {print $2}' /etc/resolv.conf) ";" > /opt/bitnami/nginx/conf/resolvers.conf
              /opt/bitnami/scripts/nginx/entrypoint.sh /opt/bitnami/scripts/nginx/run.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: http
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: config
          configMap:
            name: monitoring-grafana-loki-gateway
